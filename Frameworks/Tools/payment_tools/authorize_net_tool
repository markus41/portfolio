# Tools/payment_tools/authorize_net_tool.py

from authorizenet import apicontractsv1
from authorizenet.apicontrollers import createTransactionController
from ..Engines.constants import (
    AUTHORIZE_NET_API_LOGIN_ID,
    AUTHORIZE_NET_TRANSACTION_KEY
)
from ..Engines.logger import get_logger

logger = get_logger(__name__)

class AuthorizeNetTool:
    """
    Create and refund transactions via Authorize.Net.
    """

    def create_transaction(self, amount: float, payment: dict, transaction_type="authCaptureTransaction") -> dict:
        merchant_auth = apicontractsv1.merchantAuthenticationType()
        merchant_auth.name = AUTHORIZE_NET_API_LOGIN_ID
        merchant_auth.transactionKey = AUTHORIZE_NET_TRANSACTION_KEY

        transaction_request = apicontractsv1.transactionRequestType()
        transaction_request.transactionType = transaction_type
        transaction_request.amount = amount
        transaction_request.payment = apicontractsv1.paymentType(**payment)

        request = apicontractsv1.createTransactionRequest()
        request.merchantAuthentication = merchant_auth
        request.transactionRequest = transaction_request

        controller = createTransactionController(request)
        controller.execute()
        response = controller.getresponse()
        logger.info(f"Authorize.Net response: {response}")
        return response.transactionResponse.__dict__ if response.transactionResponse else {}
