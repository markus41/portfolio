# Tools/data_ingestion_tools/rabbitmq_ingestor.py

import pika
import json
from ..Engines.logger import get_logger
from ..Engines.constants import RABBITMQ_URL

logger = get_logger(__name__)

class RabbitMQIngestor:
    def __init__(self, queue: str):
        logger.info(f"Connecting to RabbitMQ at {RABBITMQ_URL}")
        params = pika.URLParameters(RABBITMQ_URL)
        self.conn = pika.BlockingConnection(params)
        self.channel = self.conn.channel()
        self.queue = queue
        self.channel.queue_declare(queue=queue, durable=True)

    def consume(self, callback, auto_ack=False):
        """
        Start consuming messages; callback receives the message body as dict.
        """
        def on_message(ch, method, properties, body):
            data = json.loads(body)
            logger.info(f"Received RabbitMQ message: {data}")
            callback(data)
            if auto_ack:
                ch.basic_ack(delivery_tag=method.delivery_tag)

        self.channel.basic_consume(queue=self.queue, on_message_callback=on_message, auto_ack=auto_ack)
        logger.info(f"Starting RabbitMQ consumer on queue '{self.queue}'")
        self.channel.start_consuming()
