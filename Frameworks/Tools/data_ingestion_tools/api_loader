# Tools/data_ingestion_tools/api_loader.py

import requests
import pandas as pd
from ..Engines.logger import get_logger

logger = get_logger(__name__)

class APILoader:
    def __init__(self, headers: dict = None):
        self.session = requests.Session()
        if headers:
            self.session.headers.update(headers)

    def get_json(self, url: str, params: dict = None) -> dict:
        """
        HTTP GET and return parsed JSON.
        """
        logger.info(f"GET {url} | params: {params}")
        resp = self.session.get(url, params=params)
        resp.raise_for_status()
        return resp.json()

    def to_dataframe(self, url: str, params: dict = None, record_path=None) -> pd.DataFrame:
        """
        Fetch JSON and normalize into a DataFrame.
        """
        data = self.get_json(url, params)
        logger.info("Normalizing JSON to DataFrame")
        df = pd.json_normalize(data, record_path=record_path) if record_path else pd.DataFrame(data)
        logger.info(f"Loaded {len(df)} rows")
        return df
