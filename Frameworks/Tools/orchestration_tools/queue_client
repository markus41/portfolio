# Tools/orchestration_tools/queue_client.py

import json
import redis
from ..Engines.constants import REDIS_URL
from ..Engines.logger import get_logger

logger = get_logger(__name__)

class QueueClient:
    """
    Simple FIFO queue using Redis lists.
    """

    def __init__(self):
        self.client = redis.from_url(REDIS_URL)

    def enqueue(self, queue_name: str, message: dict):
        logger.info(f"QueueClient → enqueue to {queue_name}")
        self.client.rpush(queue_name, json.dumps(message))

    def dequeue(self, queue_name: str, timeout: int = 0) -> dict | None:
        """
        BLPOP: wait up to `timeout` seconds (0=block indefinitely, None=non-blocking).
        """
        logger.info(f"QueueClient → dequeue from {queue_name}")
        result = self.client.blpop(queue_name, timeout=timeout)
        if result:
            _, raw = result
            return json.loads(raw)
        return None
