# Tools/orchestration_tools/retry_policy.py

import time
import functools
from ..Engines.logger import get_logger

logger = get_logger(__name__)

def retry(max_retries: int = 3, backoff_factor: float = 2.0, initial_delay: float = 1.0):
    """
    Decorator to retry a function on exception with exponential backoff.
    """
    def decorator(func):
        @functools.wraps(func)
        def wrapper(*args, **kwargs):
            delay = initial_delay
            for attempt in range(1, max_retries + 1):
                try:
                    return func(*args, **kwargs)
                except Exception as e:
                    if attempt == max_retries:
                        logger.error(f"[{func.__name__}] failed after {attempt} attempts: {e}")
                        raise
                    logger.warning(f"[{func.__name__}] attempt {attempt} failed: {e}, retrying in {delay}s")
                    time.sleep(delay)
                    delay *= backoff_factor
        return wrapper
    return decorator
