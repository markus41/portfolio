using System;
using System.Threading.Tasks;
using Microsoft.Azure.Functions.Worker;
using Microsoft.Extensions.Logging;
using OrchestrationSdk;

public class OrchestratorFunction
{
    private readonly IAgentClient _agentClient;
    private readonly IDagRepository _dagRepo;

    public OrchestratorFunction(IAgentClient agentClient, IDagRepository dagRepo) {
        _agentClient = agentClient;
        _dagRepo = dagRepo;
    }

    [Function("OrchestratorWorker")]
    public async Task Run(
        [ServiceBusTrigger("orchestrator", IsSessionsEnabled = true)]
        StepMessage message,
        FunctionContext context)
    {
        var log = context.GetLogger("OrchestratorWorker");
        var step = await _dagRepo.GetStepAsync(message.RunId, message.StepId);

        try {
            // Invoke the downstream agent
            var result = await _agentClient.InvokeAsync(step.AgentName, step.Input);

            // Mark success in the DAG
            await _dagRepo.MarkStepSuccessAsync(message.RunId, message.StepId, result);

            // Enqueue next steps
            var next = await _dagRepo.GetNextStepsAsync(message.RunId, message.StepId);
            foreach (var ns in next) {
                await _dagRepo.EnqueueStepAsync(ns);
            }
        }
        catch (TransientException ex) when (message.Attempt < 3) {
            log.LogWarning($"Transient failure, retrying step {message.StepId}: {ex.Message}");
            await _dagRepo.RequeueStepAsync(message, message.Attempt + 1);
        }
        catch (Exception ex) {
            log.LogError(ex, $"Step {message.StepId} failed permanently");
            await _dagRepo.MarkStepFailedAsync(message.RunId, message.StepId, ex);
            // Optionally send an alert here
        }
    }
}
