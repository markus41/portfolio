# src/orchestrator.py

from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
from agents.visitor_tracking_agent import VisitorTrackingAgent
from agents.lead_enrichment_agent import LeadEnrichmentAgent
from agents.outreach_agent import OutreachAgent
from memory_service import MemoryService
from utils.logger import get_logger
from agents.segmentation_ad_targeting_agent import SegmentationAdTargetingAgent
from agents.lead_capture_agent import LeadCaptureAgent
from agents.chatbot_agent import ChatbotAgent
from agents.crm_pipeline_agent import CRMPipelineAgent
from agents.notification_agent import NotificationAgent
from agents.human_approval_agent import HumanApprovalAgent
from agents.email_reply_monitor_agent import EmailReplyMonitorAgent
from agents.contract_sign_monitor_agent import ContractSignMonitorAgent
from agents.csat_scheduler_agent import CSATSchedulerAgent

logger = get_logger(__name__)
app = FastAPI(title="Sales AI Orchestrator")

memory = MemoryService(endpoint="http://memory-service:8001")
visitor_agent = VisitorTrackingAgent()
enrich_agent = LeadEnrichmentAgent()
outreach_agent = OutreachAgent()
notification_agent      = NotificationAgent()
human_approval_agent    = HumanApprovalAgent()
email_reply_monitor     = EmailReplyMonitorAgent()
contract_sign_monitor   = ContractSignMonitorAgent()
csat_scheduler_agent    = CSATSchedulerAgent()
seg_agent    = SegmentationAdTargetingAgent()
capture_agent= LeadCaptureAgent()
chat_agent   = ChatbotAgent()
pipeline_agent = CRMPipelineAgent()

class VisitorEvent(BaseModel):
    visitor_id: str
    page: str
    timestamp: str

class Lead(BaseModel):
    email: str
    name: str

@app.post("/track-visitor")
def track_visitor(event: VisitorEvent):
    result = visitor_agent.run(event.dict())
    memory.store(key=event.visitor_id, payload=event.dict())
    return result

@app.post("/enrich-lead")
def enrich_lead(lead: Lead):
    enriched = enrich_agent.run(lead.dict())
    if enriched["status"] == "not_found":
        raise HTTPException(status_code=404, detail="Lead not found")
    return enriched

@app.post("/outreach")
def send_outreach(payload: dict):
    resp = outreach_agent.run(payload)
    if resp["status"] == "failed":
        raise HTTPException(status_code=500, detail="Email send failed")
    return resp



@app.post("/segment-and-target")
def segment_and_target(payload: dict):
    return seg_agent.run(payload)

@app.post("/capture-lead")
def capture_lead(payload: dict):
    return capture_agent.run(payload)

@app.post("/chat")
def chat(payload: dict):
    return chat_agent.run(payload)

@app.post("/pipeline-monitor")
def pipeline_monitor(payload: dict):
    return pipeline_agent.run(payload)

@app.post("/notify")
def notify(payload: dict):
    return notification_agent.run(payload)

@app.post("/human-approve")
def human_approve(payload: dict):
    return human_approval_agent.run(payload)

@app.post("/monitor-email-reply")
def monitor_email_reply(payload: dict):
    return email_reply_monitor.run(payload)

@app.post("/monitor-contract-sign")
def monitor_contract_sign(payload: dict):
    return contract_sign_monitor.run(payload)

@app.post("/schedule-csat")
def schedule_csat(payload: dict):
    return csat_scheduler_agent.run(payload)